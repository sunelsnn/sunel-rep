/* -*- Mode: C++ -*-
 * $Id: FCFooDecision.cc,v 1.33 2005/08/13 13:33:11 frehe Exp $
 *
 *
 * COPYRIGHT INFORMATION
 *
 * This file is part of RoboSoc created by Fredrik Heintz <frehe@ida.liu.se>
 * Copyright (C) 1999, 2000 Fredrik Heintz, Linkping University, Sweden
 *
 * You are allowed to modify and use this code as long as you retain this
 * notice. If you make any changes or have any comments I would appreciate
 * it if you send me a message. For more information, please see
 * http://www.ida.liu.se/~frehe/RoboCup/RoboSoc/
 *
 *
 * IDENTIFICATION
 *
 * Filename: FCFooDecision.cc
 * Unitname: Framework/example/FCFoo
 * $Revision: 1.33 $
 * Created by: Fredrik Heintz 1999-xx-xx
 * Last modified by $Author: frehe $ $Date: 2005/08/13 13:33:11 $
 *
 *
 * HISTORY
 *
 * $Log: FCFooDecision.cc,v $
 * Revision 1.33  2005/08/13 13:33:11  frehe
 * Test the point to command.
 *
 * Revision 1.32  2004/08/16 13:12:55  petan
 * Made decision a bit leaner using AgentStep instead of Step
 *
 * Revision 1.31  2004/08/13 11:48:30  petan
 * Turned off logging, updated with better running
 *
 * Revision 1.30  2004/08/10 15:03:48  petan
 * Removed GotoBall from FCFoo
 *
 * Revision 1.29  2003/09/02 18:03:00  frehe
 * Updated to the new command pointer semantics.
 *
 * Revision 1.28  2003/08/27 09:25:42  petan
 * Fixed warnings at compile time
 *
 * Revision 1.27  2003/08/20 12:33:38  s02davro
 * onDelayedActions function
 *
 * Revision 1.26  2003/07/22 14:47:23  s02davro
 * Updated coach/trainer/player for testing new features
 *
 * Revision 1.25  2003/07/21 09:28:10  s02davro
 * Updated FCFoo to test v.9 features
 *
 * Revision 1.24  2002/09/04 14:48:05  s02davro
 * Updated FCFoos desision making
 *
 * Revision 1.23  2002/08/31 15:17:16  s02davro
 * FCFoo now run coach with -coach option, changed the main loop
 *
 * Revision 1.22  2002/08/02 22:03:38  s02davro
 * Changed FCFoo to test the modifications done (WorldModelInterface, Errors ...)
 *
 * Revision 1.21  2001/10/14 21:21:43  frehe
 * Added better support for messages from self and from other players.
 *
 * Revision 1.20  2001/10/14 14:41:42  frehe
 * Added a sample communication between the agent and itself.
 *
 * Revision 1.19  2001/09/26 13:05:37  frehe
 * Changed the order of include files to make circular updates less likely.
 *
 * Revision 1.18  2001/09/01 23:55:08  frehe
 * Made minor changes.
 *
 * Revision 1.17  2001/08/30 22:08:26  frehe
 * Wrote two simple decision makers that goes to the ball and scores.
 *
 * Revision 1.16  2001/08/29 16:31:19  frehe
 * Added some exception handling.
 *
 * Revision 1.15  2001/08/29 14:16:27  frehe
 * Made a simpler decision maker to avoid skills (until I get them to work).
 *
 * Revision 1.14  2001/08/29 08:38:34  petan117
 * Unreachable code found, marked with a FIXME
 *
 * Revision 1.13  2001/08/17 07:15:16  frehe
 * Made changes to compile RoboSoc with RCCParser-0.10.
 *
 * Revision 1.12  2001/01/08 13:41:40  frehe
 * Fixed a minor bug in FCFooDecision.
 *
 * Revision 1.11  2001/01/08 13:27:45  frehe
 * Fixed a minor bug in FCFooDecision.
 *
 * Revision 1.10  2000/11/08 09:41:10  frehe
 * Updated the FCFooDecision to use the Score skill.
 *
 * Revision 1.9  2000/11/02 16:33:45  frehe
 * Minor updates.
 *
 * Revision 1.8  2000/10/24 15:15:46  frehe
 * Made minor updates and tests.
 *
 * Revision 1.7  2000/10/19 00:05:35  frehe
 * Made minor changes.
 *
 * Revision 1.6  2000/10/18 23:07:11  frehe
 * Added a say message and a display of them.
 *
 * Revision 1.5  2000/10/11 18:40:29  frehe
 * Upgraded FCFoo.
 *
 * Revision 1.4  2000/10/10 11:55:37  frehe
 * Fixed FCFooDecision to work with the new skills.
 *
 * Revision 1.3  2000/10/08 17:34:11  frehe
 * Fixed FCFoo.
 *
 * Revision 1.2  2000/09/05 21:12:55  frehe
 * Made FCFoo compile with RoboSoc 2.5.0
 *
 * Revision 1.1.1.1  2000/08/31 13:26:05  frehe
 * Importet the current version of RoboSoc (soon to be v2.5.0)
 *
 */

/**
 * @file FCFooDecision.cc
 * Implementation of the class FCFooDecision.
 *
 * @par Unit:
 *      Framework/example/FCFoo
 * $Revision: 1.33 $
 * $Author: frehe $
 * $Date: 2005/08/13 13:33:11 $
 */


#include "FCFooDecision.h"

#include <unistd.h>
#include <errno.h>
#include <iostream>

#include "BallView.h"
#include "GameView.h"
#include "AgentView.h"
#include "PlayerView.h"
#include "ActuatorInterface.h"
#include "ViewManager.h"
#include "view_constants.h"
#include "InitCommand.h"
#include "ClangVersionCommand.h"
#include "MoveCommand.h"
#include "SayCommand.h"
#include "DashCommand.h"
#include "KickCommand.h"
#include "TurnCommand.h"
#include "TurnNeckCommand.h"
#include "TurnNeckToAbsoluteDirection.h"
#include "TurnNeckToPoint.h"
#include "TurnNeckToBall.h"
#include "TurnBodyToAbsoluteDirection.h"
#include "TurnBodyToPoint.h"
#include "PointToCommand.h"
#include "TackleCommand.h"
#include "SetTicksBeforeCommandWarning.h"
#include "rs_assert.h"
#include "rs_log.h"
#include "DashToPointDir.h"
#include "AlignNeckToBody.h"
#include "Time.h"
#include "math.h"
#include "AngleDegreesUE.h"
#include "CoordPointUE.h"
#include <fstream>

RS_BEGIN_NAMESPACE
// Defines the max angle before turning when dashing to a point
#define DASH_MAX_ANGLE 15

FCFooDecision::FCFooDecision(ActuatorInterface* const actuator_interface)
  : Decision(actuator_interface),
    viewManager(ViewManager::instance()),
    worldModelInterface(WorldModelInterface::instance()),
    facts(worldModelInterface->getWorldFacts()),
    gameView(NULL),
    ballView(NULL),
    playerView(NULL),
    agentView(NULL),
    aural_data(0),
    dashToPoint(Point(0,0)),
    turnBodyToPoint(Point(0,0)) {
  getView(ballView, BALL_VIEW_ID);
  getView(playerView, PLAYER_VIEW_ID);
  getView(gameView, GAME_VIEW_ID);
  getView(agentView, AGENT_VIEW_ID);
}

FCFooDecision::~FCFooDecision() {
  viewManager->releaseView(GAME_VIEW_ID);
  viewManager->releaseView(BALL_VIEW_ID);
  viewManager->releaseView(PLAYER_VIEW_ID);
  viewManager->releaseView(AGENT_VIEW_ID);
}

ServerCommand* FCFooDecision::initAgent() {
  InitCommand* init_cmd = new InitCommand(facts->CP_team_name,
					  facts->SP_version,
					  facts->CP_goalie);
  return init_cmd;
}

bool FCFooDecision::start() {
  RS_REQUIRE( initialized == true );
  return true;
}


static  const WorldModelInterface* wmi = WorldModelInterface::instance();
 const  WorldModel& wm = wmi->getWorld();
Time TIME ;

UInt PREVTIME=0 ;
UInt CURRTIME=0;
int angleinc=0;
// const std::vector<PlayerObject>& opps_wm =0 ;
// const std::vector<PlayerObject>& team_wm =0;
PlayerObject opps[11] , teamm[11] , opps_p[11] ;
float rec_theta1[11] ;
float rec_theta2[11] ;
float Qtab[18*18][2] ;
int nostates, noaction ;
Point *opp_loc ;
bool kick_status = false ;
bool turn_status = false ;

void FCFooDecision::readQFile()
{

	std::ifstream file1("qfile.txt", std::ios_base::in) ;
	if (!file1.is_open())
	{ std::cout<< "\n couldnt open file " ;	exit(0);}

	int i=0,j=0,k=0,k1=0,num1=0; char a[2000], a1[2000] ;

	for (i=0; i<nostates; i++)
	{
	     file1.getline(a,2000) ;
	     k=0;j=0;
	     while(a[k]!='\n')
	     { k1=0;num1=0;
	       while(a[k]!=' ')
	       { a1[k1] =a[k]; k1++ ;k++ ;
	       a1[k1] = '\0' ; num1 = std::atof(a1) ;
	       Qtab[i][j] = num1 ;
	       j++;k++; if(j>=noaction) { std::cout << "some error" ; break ;}

	       } // while
	     } // while

	     } // for




} // readQfile

void FCFooDecision::writeQFile()
{
 int i=0,j=0 ;
	for (i=0; i<nostate ;i++)
	{   for(j=0 ; j< noaction ; j++)
	{ fileout<< Qtab[i][j] <<" " ; }
		fileout <<"\n" ;
	}
}


bool FCFooDecision::decide() {
  RS_LOG ( LA_DECISION, "Decide" );
  static int say_counter = 10;
  Command *cmd = 0;
  ServerCommand *scmd = 0, *scmd2=0;
  ServerCommand *neckcmd = 0;
  ServerCommand *saycmd = 0;
  ServerCommand *pointcmd = 0;

    TIME = Time::currentTime ;
      CURRTIME = TIME.getT() ;

//  std::cout<<"\n curr time "<< CURRTIME <<" PREV TIME "<<PREVTIME ;
  // Example of a simple decision maker using skills.
  // If the ball's position is known, the agent will run
  // To that position, and try to kick the ball towards the
  // opponents goal.

// initialise q table to Zero,
// action space  go forward , go backward , turn around anti clock wise , turn clock wise.
 // selection an action with max Q value .

  const std::vector<PlayerObject>& opps_wm   = wm.getOpponents();
  const std::vector<PlayerObject>& team_wm =  wm.getTeammates() ;
  const std::vector<PlayerObject>& opps_pv =  playerView->getOpponents(0);





std::cout << "\n player view opponents \n" ;

  int Pindex=0 ;
  for ( std::vector<PlayerObject>::const_iterator i = opps_pv.begin();
   	   							i != opps_pv.end(); ++i )
   	   						{
	  	  	  	  	  	  	  	  	  	  if (i->getUniformNumber().isKnown())
	   	   											{   int Uno = 0 ;
	   	   										   Uno =  i->getUniformNumber().getValue()  ;
	   	   														if (Uno > 11) {exit(0); }
	   	   														std::cout<<" uniform number " << i->getUniformNumber() << "\n" ;
	   	   	                            //opps1.remove(&Uno) ;
	   	   	                            //opps1.insert(Uno, i) ;
	   	   								//opps2[Uno] = dynamic_cast<PlayerObject>(i) ;
	   	   														opps_p[Uno] =  opps_pv.at(Pindex) ; Pindex++ ;
	   	   											}  // if uniform

   	   						}

  std::cout<< "\n world model opponents \n" ;
 	    Pindex =0 ; // int Uno=0 ;
 	   	for ( std::vector<PlayerObject>::const_iterator i = opps_wm.begin();
 	   							i != opps_wm.end(); ++i )
 	   						{

 	   									if (i->getUniformNumber().isKnown())
 	   											{   int Uno = 0 ;
 	   										   Uno =  i->getUniformNumber().getValue()  ;
 	   														if (Uno > 11) {exit(0); }
 	   														std::cout<<" uniform number " << i->getUniformNumber() << "\n" ;
 	   	                            //opps1.remove(&Uno) ;
 	   	                            //opps1.insert(Uno, i) ;
 	   								//opps2[Uno] = dynamic_cast<PlayerObject>(i) ;
 	   														opps[Uno] =  opps_wm.at(Pindex) ; Pindex++ ;
 	   											}  // if uniform
 	   									if( i->getPosition().isKnown())
 	   											{ std::cout<<"x and y pos" <<i->getPosition().getX().getValue()<<"  " <<i->getPosition().getY().getValue()<<"\n"  ; }
 	   									if (i->getNeckDirection().isKnown())
 	   											{ std::cout<<"neck direction " << i->getNeckDirection().getDeg()<<"\n" ; }
 	   									if( i->getBodyDirection().isKnown()) {
 	   											std::cout<<"body direction "<<i->getBodyDirection().getDeg()<<"\n" ; }

 	   									if( i->getPointDirection().isKnown() )
 	   											{ std::cout<<"point direction " <<i->getPointDirection().getDeg()<<"\n" ;}



 	   						} // for

 	   				// if ( opps_pv.size() > opps_wm.size() ) {   opps = opps_p ; }
 	   	std::cout<<"\n # of  oppn_wm opp_pv teammates "<< opps_wm.size()<<" "<<opps_pv.size()<<" "<<team_wm.size() ;
 	   //	std::cout<<"\n \n team mates \n # of teammates"<<opps_pv.size() ;


 	   	std::cout<<"\n team mates \n " ;
                                  Pindex=0 ;
 		for ( std::vector<PlayerObject>::const_iterator i = team_wm.begin();
 	 	   							i != team_wm.end(); ++i )

 		{
 										int Uno = 0 ;
 											if (i->getUniformNumber().isKnown())
 			 	   											{
 			 	   										   Uno =  i->getUniformNumber().getValue()  ;
 			 	   														if (Uno > 11) {exit(0); }
 			 	   														std::cout<<" uniform number " << i->getUniformNumber() << "\n" ;
 			 	   	                            //opps1.remove(&Uno) ;
 			 	   	                            //opps1.insert(Uno, i) ;
 			 	   								//opps2[Uno] = dynamic_cast<PlayerObject>(i) ;
 			 	   														teamm[Uno] =  team_wm.at(Pindex) ; Pindex++ ;
 			 	   											}  // if uniform

 											double mindist = 105  , mindistang = 359, minang =359,minangdist=105 ,minang2=359,minangdist2=109, dist=0 , ang1= 0, recoppdist=0;
 											if( i->getPosition().isKnown())
 											{ std::cout<<"x and y pos" <<i->getPosition().getX().getValue()<<"  "
 												<<i->getPosition().getY().getValue()<<"\n"  ;
 												AngleDeg recdir =  AngleDeg(agentView->getPosition().getDirectionTo(i->getPosition()).getValue() ) ;

 												double recdist = agentView->getPosition().getDistanceTo(i->getPosition()).getValue();
 												std::cout<<"\n recdist"<<recdist;

 												if (opps_pv.size() >  opps_wm.size())
 												{
 													for (int ind2= 0 ; ind2<11; ind2++)
 													{

 														if  ( opps_p[ind2].getPosition().isKnown() )
 													  {   dist = agentView->getPosition().getDistanceTo( opps_p[ind2].getPosition()).getValue() ;
 													     ang1 = abs( AngleDeg(agentView->getPosition().getDirectionTo(opps_p[ind2].getPosition()).getValue()).getDeg()
 													    		 - recdir.getDeg() ) ;
 													     recoppdist = i->getPosition().getDistanceTo(opps_p[ind2].getPosition()).getValue() ;
 													     if(mindist >= dist) { mindist = dist ; mindistang = ang1 ;}

 													    if(minang2 >= ang1 and recoppdist -dist >= -3 ) { minang2 = ang1 ; minangdist2 = dist ; }

 													    if(minang >= ang1 and ( recoppdist - dist  >= -3  or ( recoppdist <= 15 and dist <= 15 ) )
 													    		 and ( dist - recdist  <= 3 or ( dist <= 15 and recdist <= 15 ) )
 													    		 ) { minang = ang1 ; minangdist = dist ;}
 													     std::cout<<"\n loop "<<ind2<<" dist and ang1 "<<dist<<" "<<ang1<<" "<<recoppdist<<" \n " ;
 													   } // if opp pos
 													  } // for

 												} // if opps size
 												else
 												{

 													for (int ind2= 0 ; ind2<11; ind2++)
 													{

 														if  ( opps[ind2].getPosition().isKnown() )
 													  {   dist = agentView->getPosition().getDistanceTo( opps[ind2].getPosition()).getValue() ;
 													     ang1 = abs(
 													   AngleDeg(agentView->getPosition().getDirectionTo(opps[ind2].getPosition()).getValue()).getDeg()
 													    		 - recdir.getDeg() ) ;
 													     if (ang1 > 180 ) { ang1 = 360-ang1 ;}
 													     recoppdist = i->getPosition().getDistanceTo(opps[ind2].getPosition()).getValue() ;
 													     if(mindist >= dist) { mindist = dist ; mindistang = ang1 ;}
 													    if(minang2 >= ang1 and recoppdist  - dist >= -3 ) { minang2 = ang1 ; minangdist2 = dist ; }


 													     if(minang >= ang1 and
 													    		 (recoppdist  - dist >= -3  or ( recoppdist <= 15 and dist <= 15 ))
 													     	 	 and
 													    		 ( dist - recdist <= 3 or ( dist <= 15 and recdist <= 15 ) )
 													    		 ) { minang = ang1 ; minangdist = dist ;}

 													    std::cout<<"\n loop "<<ind2<<" dist and ang1 "<<dist<<" "<<ang1<<" "<<recoppdist<<" \n " ;
 													   } // if opp pos
 													  } // for

 												} // else
 													} //if position

 											//theta1 = min angle and agent opponentdist  < receiver oppponent dist  and agent opponent dist < reciever dist
 											// theta1 > theta1_2 , then theta1 = theta1_2
 												if ( minang > minang2 ){ minang= minang2 ; minangdist = minangdist2 ; }

 												//if theta1 > 180 , display all parameters
 											 if (minang >= 180 or mindistang >= 180 )
 											 { std::cout<< "\n  mindist " << mindist << " mindistang "<<mindistang
 												 <<" minang "<<minang <<" minangdist "<<minangdist << " dist " << dist<< " ang1 "<< ang1
 												 <<" recoppdist "<< recoppdist ;


 											 }

 											 // theta1 > 180 and theta2 < 180 , theta1 = theta2 .
 											 if ( minang >= 180 and mindistang < 180)  { minang = mindistang ; }
 											 	 	 rec_theta1[Uno] = minang ;
 													rec_theta2[Uno] = mindistang ;

 			 	   									if (i->getNeckDirection().isKnown())
 			 	   											{ std::cout<<"neck direction " << i->getNeckDirection().getDeg()<<"\n" ; }
 			 	   									if( i->getBodyDirection().isKnown()) {
 			 	   											std::cout<<"body direction "<<i->getBodyDirection().getDeg()<<"\n" ; }

 			 	   									if( i->getPointDirection().isKnown() )
 			 	   											{ std::cout<<"point direction " <<i->getPointDirection().getDeg()<<"\n" ;}

 			 	   										std::cout<<"\n \n  theta1 and theta2 values "<<rec_theta1[Uno]<<" "<<rec_theta2[Uno] ;
 		}













  if ( gameView->getPlayMode() == PM_BEFORE_KICK_OFF ) {
    /*
    // Turn body straight head
    TurnBodyToAbsoluteDirection turn_body(0);
    scmd = dynamic_cast<ServerCommand*>(turn_body.generateStep().getNextCommand());
    */

    // Turn neck straight ahead
   // TurnNeckToAbsoluteDirection turnNeck(0, scmd);

    // Send the commands to the actuators.
   // if ( scmd != 0 ) {
   //   actuatorInterface->addToPlan(scmd);
   // }


  //  AngleDeg Neckang(10 + agentView->getNeckDirection().getDeg() ) ;

    //  				TurnNeckToAbsoluteDirection  TurnNeck(Neckang, scmd) ;
    //  			//	if (cyclecnt == 1) {   TurnNeck(AngleDeg(0.0), scmd) ;}
     // 				 if ( TurnNeck.applicable() ){
      //				 // if ( scmd != 0 ) {
      //				//	actuatorInterface->addToPlan(scmd) ; }


      	//			scmd =  dynamic_cast<ServerCommand*> (TurnNeck.generateStep().getNextCommand()) ;
      		//						actuatorInterface->addToPlan( scmd) ;
             // }
	  AngleDeg bodyangle ( 10 + agentView->getBodyDirection().getDeg()) ;
	  TurnBodyToAbsoluteDirection TurnBody(bodyangle) ;
	  scmd =  dynamic_cast<ServerCommand*> (TurnBody.generateStep().getNextCommand()) ;
	  actuatorInterface->addToPlan( scmd) ;


//    actuatorInterface->addToPlan(turnNeck.generateStep());
  } else
  {


     //  if (CURRTIME > PREVTIME ) {
    //	   std::cin.get() ;
     // scmd = new DashCommand(5, 180) ;
     // actuatorInterface->addToPlan(scmd);
     //angleinc++ ;if(angleinc > 9 ) { angleinc = angleinc -9 ;} }
      // PREVTIME =CURRTIME ;
      // return true ;




   std::string cmdty  ;


	  AngleDegUE goal_dir = agentView->getPosition().getDirectionTo
	 	(facts->getTheirGoal().getPosition());

	  if ( ballView->getRelativeDistance() <= facts->SP_kickable_margin )
	  {
	  std::cout<<"\n the kick moment "<<float( goal_dir.getDeg() )- float (agentView->getBodyDirection().getAngle().getDeg() )
			  << " kick maxmoment " << facts->SP_maxmoment;
	  }

	 // if( turn_status == true ){ scmd =0 ;
	  //turnBodyToPoint.setPosition(ballView->getPosition().getPoint());
	   //   		scmd2 = dynamic_cast<ServerCommand*>(turnBodyToPoint.generateStep().getNextCommand()) ;
	    //  		cmdty = "SCMD2" ;

	  //}
	  // else
		  if (searchBall.applicable()) {
      RS_LOG ( LA_DECISION, "SearchBall" );
      cmd = searchBall.generateStep().getNextCommand();
      scmd = dynamic_cast<ServerCommand*>(cmd); cmdty = "SEARCH" ;
	  	  	  	  	  	  	  	  	  	  }
	  else if ( gameView->isKickAllowed() &&
	      ( ballView->getRelativeDistance() <= facts->SP_kickable_margin)   // and kick_status == true
	       and  (float( goal_dir.getDeg() )- float (agentView->getBodyDirection().getAngle().getDeg() ) < facts->SP_maxmoment
	       and  float (goal_dir.getDeg()) - 	float (agentView->getBodyDirection().getAngle().getDeg() ) > facts->SP_minmoment )  )
	      {
		  	  	  RS_LOG ( LA_DECISION, "Kicking" );
      // The ball is kickable, can we kick it to the ball.
      // Get the direction to the opponents goal.

       //AngleDegUE goal_dir = 20*(angleinc+1.0);
       //angleinc = angleinc+1.0 ;

      //Kick the ball towards the goal.


		  	  	  scmd = new KickCommand(50,(goal_dir -
		  	  	  agentView->getBodyDirection()).getAngle());
		  	  	  kick_status=false ;
		  	  	  cmdty = "kick" ;

      //scmd = new KickCommand(50, ( AngleDeg(angleinc*20) + agentView->getBodyDirection()).getAngle()) ;
      //angleinc = angleinc+1 ;
     // angleinc = angleinc - 18*floor(anngleinc/18) ;
      //if (angleinc >= 18 ){ angleinc= angleinc-18 ;}

      //std::cout <<"\n angleinc "<<angleinc ;
      // std::cin.get() ;
	      }
    else if ( gameView->isKickAllowed()  and
  	      ( ballView->getRelativeDistance() <= facts->SP_kickable_margin)   //  and kick_status == true
  	     and   ( float (goal_dir.getDeg()) - 	float (agentView->getBodyDirection().getAngle().getDeg() ) > facts->SP_maxmoment
  	      or    float (goal_dir.getDeg()) - 	float (agentView->getBodyDirection().getAngle().getDeg() ) < facts->SP_minmoment  ) )
    {

 //  TurnBodyToAbsoluteDirection   tbtad( agentView->getBodyDirection().getAngle() + 180)	 ;
  // scmd  = dynamic_cast<ServerCommand*>(tbtad.generateStep().getNextCommand()) ;
   // kick_status = true ;
    		if (CURRTIME > PREVTIME )
    			{	std::cout<<"\n \n Dash command executed " ;
    			std::cout<<"\n agent postition "<<agentView->getPosition().getPoint() ;
    			}

 // std::cin.get() ;
    		Point ball_pos = ballView->getPosition().getPoint();
    		AngleDeg  ang1= ball_pos.getVectorTo(agentView->getPosition().getPoint()).getAngle() ;
    		AngleDeg ang2 = ball_pos.getVectorTo(facts->getTheirGoal().getPosition()).getAngle() ;
    		float moment ;

    		if(ang1 < 0 ) ang1 = AngleDeg(360)+ang1 ;
    		if(ang2 < 0 ) ang2 = AngleDeg(360) +ang1 ;

    		if (CURRTIME > PREVTIME )  std::cout << "\n angle1 and angl2"<<ang1<<" " <<ang2 ;
    		if (abs(ang1-ang2) > 180 )
    			{   moment = -1*facts->SP_maxmoment ; }  else { moment = facts->SP_maxmoment ; }


   Point destPoint(ball_pos.getX() + 2*facts->SP_kickable_margin*cos( (ang1/abs(ang1))*AngleDeg(moment)+ ang1 ) ,
   	   ball_pos.getY() + 2*facts->SP_kickable_margin*sin( (ang1/abs(ang1))*AngleDeg(moment)+ ang1) ) ;

    	//	Point destPoint(ball_pos.getX() + 3*facts->SP_kickable_margin*cos( AngleDeg(90) + ang1 ) ,
    		//		ball_pos.getY() + 3*facts->SP_kickable_margin*sin( AngleDeg(90) + ang1) ) ;

    		if (CURRTIME > PREVTIME ) std::cout<< "\n ball_pos and dest point"<<ball_pos <<" "<<destPoint ;

    		if (CURRTIME > PREVTIME ) std::cout<<"\n vector angle with new location"<<(ball_pos.getVectorTo(destPoint).getAngle() -  ang2) ;
    		Point relativePoint = destPoint - agentView->getPosition().getPoint();
    		float  dashPower = agentView->getPowerForDash(relativePoint);

    		std::cout<<"\n  angle agent to dest  "<<agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()
    				<<"  body direction"<<agentView->getBodyDirection().getAngle().getDeg() ;
    		Vector  agenttodest(agentView->getPosition().getPoint(), destPoint) ;
    		std::cout<<" vector angle "<<agenttodest.getAngle() ;

    		float deg ;
    		if ( (agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()  - agentView->getBodyDirection().getAngle().getDeg() ) > 180)
    		{  deg = 360 - (agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()  - agentView->getBodyDirection().getAngle().getDeg())  ;}
    		else if (  (agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()  - agentView->getBodyDirection().getAngle().getDeg() )   < -180 )
    		{  deg = 360 + (agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()  - agentView->getBodyDirection().getAngle().getDeg()) ; }
    		else
    		{ deg = (agentView->getPosition().getPoint().getDirectionTo(destPoint).getDeg()  - agentView->getBodyDirection().getAngle().getDeg()) ; }

    		 scmd = new DashCommand( 3*dashPower,  deg );
    		  DashToPointDir  DTPD(scmd) ;
    		     scmd2 = dynamic_cast<ServerCommand*>(DTPD.generateStep().getNextCommand()) ;

    		 		 //  dashPower) ;
    		// turnBodyToPoint.setPosition(ballView->getPosition().getPoint());
    		// scmd2 = dynamic_cast<ServerCommand*>(turnBodyToPoint.generateStep().getNextCommand()) ;
    		          //  dashToPoint.setPosition(destPoint) ;
    		           // scmd = dynamic_cast<ServerCommand*>(dashToPoint.generateStep().getNextCommand()) ;
    		turn_status = true ;
    		cmdty="DASH and turn" ;

    	}
    else 	{
    	if (ballView->getRelativeDirection().isKnown()) {
    			if (abs(ballView->getRelativeDirection().getDeg()) > DASH_MAX_ANGLE) {
    				turnBodyToPoint.setPosition(ballView->getPosition().getPoint());
    				cmd = turnBodyToPoint.generateStep().getNextCommand();
    				scmd = dynamic_cast<ServerCommand*>(cmd);
    				cmdty = "TURNBODYTOPOINT" ;
    			}
	else {
			Point ball = ballView->getPosition().getPoint();
			dashToPoint.setPosition(ball);
			cmd = dashToPoint.generateStep().getNextCommand();
			scmd = dynamic_cast<ServerCommand*>(cmd);
			cmdty = "DASHTOPoint" ;
	}  // else
      }  // if iskwnown
    } // else

    if ( CURRTIME > PREVTIME ) {
      // Look at the ball




    	if( scmd!=0) {
     //  TurnNeckToBall turnNeckToBall(scmd);
      actuatorInterface->addToPlan(scmd);
     // actuatorInterface->addToPlan(turnNeckToBall.generateStep());
      scmd=0 ;
      std::cout<<"\n  scmd main command "<<cmdty ;

    	}
    	if(scmd2!=0)
    	{  actuatorInterface->addToPlan(scmd2);
    	scmd2=0;
    	}


    	//else {
    	//	// TurnNeckToBall turnNeckToBall(scmd2) ;
    	//actuatorInterface->addToPlan(scmd2);
    	//// actuatorInterface->addToPlan(turnNeckToBall.generateStep());
    	//scmd2=0 ; turn_status = false ;
    	// std::cout<<"\n  scmd2 sub  command " ;
    	//}



    	PREVTIME =CURRTIME ;
      // Send the commands to the actuators.


    }

    // Example of pointing.

    /*  if (agentView->getPosition().isKnown() && (say_counter == 5)) {
	RS_LOG ( LA_DECISION, "Pointing" );
	Vector v = agentView->getPosition().getVectorTo(facts->getTheirGoal().getPosition()).getVector();
	pointcmd = new PointToCommand(v);
	actuatorInterface->addToPlan(pointcmd);
	}
	else if (say_counter == 8) {
	RS_LOG ( LA_DECISION, "Pointing off" );
	pointcmd = new PointToCommand();
	actuatorInterface->addToPlan(pointcmd);
	}

	// Example of communication.

	if ( say_counter == 0 ) {
	RS_LOG ( LA_DECISION, "Talking" );
	saycmd = new SayCommand("Hello" + toString(aural_data));
	actuatorInterface->addToPlan(saycmd);
	say_counter = 9;
	} else {
	--say_counter;
	} */
  }

  return true;
}

void FCFooDecision::onAuralCoachSensorData() {
  std::cerr << "I got " << agentView->getCoachMessage()
	    << " from the coach (trainer or non-CLang coach)" << std::endl;
}

void FCFooDecision::onAuralRefereeSensorData() {
  std::cerr << "I got message from the referee." << std::endl;
}

void FCFooDecision::onAuralPlayerSensorData() {
  if (agentView->getTeammateMessageDirection().isKnown()) {
    std::cerr << "I got " << agentView->getTeammateMessage()
	      << " from teammate nr " << agentView->getTeammateSpeaker()
	      << " from direction " << agentView->getTeammateMessageDirection()
	      << std::endl;
    if (agentView->getOpponentMessageDirection().isKnown()) {
      std::cerr << " and " << std::endl;
    }
  }
  if (agentView->getOpponentMessageDirection().isKnown()) {
    std::cerr << "I got " << agentView->getOpponentMessage()
	      << " from an opponent from direction "
	      << agentView->getOpponentMessageDirection()
	      << std::endl;
  }
  ++aural_data;
}

void FCFooDecision::onAuralSelfSensorData() {
  std::cerr << "I got " << agentView->getOwnMessage()
	    << " from myself" << std::endl;
  ++aural_data;
}

void FCFooDecision::onInit() {
  // Position the players with some distance at the beginning of game.
  Point movePoint = Point(-10,-10);
  if (agentView->getUniformNumber().isKnown()) {
    UInt nr = agentView->getUniformNumber().getValue();
    switch (nr) {
    case 1:
      movePoint = Point(-10, 0);
      break;
    case 2:
      movePoint = Point(-5, -15);
      break;
    case 3:
      movePoint = Point(-5, 15);
      break;
    case 4:
      movePoint = Point(-25, 10);
      break;
    case 5:
      movePoint = Point(-25, -10);
      break;
    case 6:
      movePoint = Point(-25, 20);
      break;
    case 7:
      movePoint = Point(-25, -20);
      break;
    case 8:
      movePoint = Point(-45, 10);
      break;
    case 9:
      movePoint = Point(-25, -10);
      break;
    case 10:
      movePoint = Point(-25, 20);
      break;
    case 11:
      movePoint = Point(-25, -20);
      break;
    default:
      movePoint = Point(-10,-10);
    }
  }
  MoveCommand* move_cmd = new MoveCommand(movePoint);
  actuatorInterface->addToPlan(move_cmd);

  // Tell server (and coach) what coachlanguage versions we're supporting.
  ClangVersionCommand* clangvCommand = new ClangVersionCommand(facts->CP_clang_version_min,
							       facts->CP_clang_version_max);
  actuatorInterface->addToPlan(clangvCommand);
}

void FCFooDecision::onCommandWarning() {
  decide();
}

void FCFooDecision::onDelayedActions() {
  if (facts->CP_ticks_before_command_warning > facts->CP_min_ticks_before_sending_command) {
    SetTicksBeforeCommandWarning* st =
      new SetTicksBeforeCommandWarning(facts->CP_ticks_before_command_warning - 1);
    RS_LOG(LA_DECISION, "Responding to server command hole by lowering " <<
	   "'ticks_before_command_warning' to " <<
	   toString((facts->CP_ticks_before_command_warning - 1)));
    actuatorInterface->addToPlan(st);
  }
}

RS_END_NAMESPACE
